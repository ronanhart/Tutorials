[["index.html", "Tutorials Chapter 1 Set Up Pyton and Earth Engine API 1.1 Install Anaconda 1.2 Install the Earth Engine API 1.3 Connect your Earth Engine credentials to the API", " Tutorials Ronan Hart 2023-03-31 Chapter 1 Set Up Pyton and Earth Engine API Before being able to use rgee, you need to ensure: python is installed the python Earth Engine API is installed your Earth Engine credentials are connected to the API (Note: these instructions are for Windows) 1.1 Install Anaconda Go to https://www.anaconda.com/ and select “Download”. (this automatically installs python) After Anacoda is successfully downloaded, open the Command Prompt shell - open the start menu and search for ‘Command Prompt’ or press the Windows key + R and search ‘cmd’ - You should see something like C:\\Users\\[username]&gt; and your cursor In the command prompt, enter anaconda3\\condabin\\activate You should now see (base) in front of your user name Test that conda is installed correctly by enterng conda --help If the result is something like 'conda' not found or 'conda' not recognized as a command, then conda did not install correctly. 1.2 Install the Earth Engine API If you don’t see (base) in front of your user name, activate your base conda environment by entering anaconda3\\condabin\\activate Create a conda virtual environment for the Earth Engine API (It is always recommended to work in different environments and not your base environment). We want to name it rgee since we will use this environment to work with the rgee package. In the command prompt, enter conda create --name rgee and enter y when prompted. Activate your conda rgee environment by entering conda activate rgee You should now see (rgee) in front of your user name Note: to exit the rgee environment, enter conda deactivate and you should see (base) in front of your user name again. Install the Earth Engine API into this conda rgee environment by entering conda install -c conda-forge earthengine-api==0.1.323 and type y when prompted. conda install is the method of installing any packages into the conda environment. -c conda-forge is needed because earthengine-api is not a built-in package in python (kind of like how you might install a github package using devtools::). Note that we are installing version 0.1.323 of earthengine-api. This is not the most recent version of earthengine-api, but rgee was developped and will work best with this version. Go ahead and also install the package pandas (a python package that handles data management, similar to dplyr in R). Enter conda install pandas and type y when prompted. This will automatically install all of pandas dependencies, like numpy (a package that handles scientific computation) 1.2.1 Install gcloud We need to ensure that gcloud is installed to connect our Google credentials to Earth Engine API Check that gcloud is installed or not by typing in the command shell glcoud --help if the result is something like 'gcloud' not found or 'gcloud' not recognized as a command, then gcloud is not installed. (If you see something besides the above, then skip to the rest of this section) Install the gcloud Command Line Interface (CLI) by following the instructions here After the installer finishes, select the option to open the Google Cloud Command Prompt. If you closed out of the installer without selecting to open the Google Cloud Command Prompt, it’s ok. Close and re-open the Windows Command Prompt and type cd &quot;AppData\\Local\\Google\\Cloud SDK&quot; You are now in this folder directory. Now type cloud_env.bat And now you are in the Google Cloud CLI You will be prompted to log in. Type y and a browser window will automatically open. Log in to the Google account that your Earth Engine account is connected to. Return to the command prompt and select the correct cloud project that you are working in. Close and re-open the Command Prompt shell, re-activate conda and the conda rgee environment (you should see (rgee) in front of your user name) 1.3 Connect your Earth Engine credentials to the API In the command shell, type earthengine authenticate A browser will automatically open. Log in to the Google account connected to your Earth Engine account and allow access to the API 1.3.0.1 Check that the API was connected correctly In the command shell, type python This will begin a python interpreter in your conda ee environment, allowing you to code in python in the command shell Type import ee ee.Initialize() print(ee.Image(&#39;USGS/SRTMGL1_003&#39;).getInfo()) If the command line prints out metadata of a DEM dataset (looking something like {'type': 'Image', 'bands': …), then you have successfully conencted the API to your Earth Engine account To exit the python interpreter, type ctr + Z (It will look like ^Z) "],["hello.html", "Chapter 2 Hello", " Chapter 2 Hello "],["cross.html", "Chapter 3 Cross-references 3.1 Chapters and sub-chapters 3.2 Captioned figures and tables", " Chapter 3 Cross-references Cross-references make it easier for your readers to find and link to elements in your book. 3.1 Chapters and sub-chapters There are two steps to cross-reference any heading: Label the heading: # Hello world {#nice-label}. Leave the label off if you like the automated heading generated based on your heading title: for example, # Hello world = # Hello world {#hello-world}. To label an un-numbered heading, use: # Hello world {-#nice-label} or {# Hello world .unnumbered}. Next, reference the labeled heading anywhere in the text using \\@ref(nice-label); for example, please see Chapter 3. If you prefer text as the link instead of a numbered reference use: any text you want can go here. 3.2 Captioned figures and tables Figures and tables with captions can also be cross-referenced from elsewhere in your book using \\@ref(fig:chunk-label) and \\@ref(tab:chunk-label), respectively. See Figure ??. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Don’t miss Table ??. knitr::kable( head(pressure, 10), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) "],["parts.html", "Chapter 4 Parts", " Chapter 4 Parts You can add parts to organize one or more book chapters together. Parts can be inserted at the top of an .Rmd file, before the first-level chapter heading in that same file. Add a numbered part: # (PART) Act one {-} (followed by # A chapter) Add an unnumbered part: # (PART\\*) Act one {-} (followed by # A chapter) Add an appendix as a special kind of un-numbered part: # (APPENDIX) Other stuff {-} (followed by # A chapter). Chapters in an appendix are prepended with letters instead of numbers. "],["footnotes-and-citations.html", "Chapter 5 Footnotes and citations 5.1 Footnotes 5.2 Citations", " Chapter 5 Footnotes and citations 5.1 Footnotes Footnotes are put inside the square brackets after a caret ^[]. Like this one 1. 5.2 Citations Reference items in your bibliography file(s) using @key. For example, we are using the bookdown package (Xie 2023) (check out the last code chunk in index.Rmd to see how this citation key was added) in this sample book, which was built on top of R Markdown and knitr (Xie 2015) (this citation was added manually in an external file book.bib). Note that the .bib files need to be listed in the index.Rmd with the YAML bibliography key. The RStudio Visual Markdown Editor can also make it easier to insert citations: https://rstudio.github.io/visual-markdown-editing/#/citations References "],["blocks.html", "Chapter 6 Blocks 6.1 Equations 6.2 Theorems and proofs 6.3 Callout blocks", " Chapter 6 Blocks 6.1 Equations Here is an equation. \\[\\begin{equation} f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k} \\tag{6.1} \\end{equation}\\] You may refer to using \\@ref(eq:binom), like see Equation (6.1). 6.2 Theorems and proofs Labeled theorems can be referenced in text using \\@ref(thm:tri), for example, check out this smart theorem 6.1. Theorem 6.1 For a right triangle, if \\(c\\) denotes the length of the hypotenuse and \\(a\\) and \\(b\\) denote the lengths of the other two sides, we have \\[a^2 + b^2 = c^2\\] Read more here https://bookdown.org/yihui/bookdown/markdown-extensions-by-bookdown.html. 6.3 Callout blocks The R Markdown Cookbook provides more help on how to use custom blocks to design your own callouts: https://bookdown.org/yihui/rmarkdown-cookbook/custom-blocks.html "],["sharing-your-book.html", "Chapter 7 Sharing your book 7.1 Publishing 7.2 404 pages 7.3 Metadata for sharing", " Chapter 7 Sharing your book 7.1 Publishing HTML books can be published online, see: https://bookdown.org/yihui/bookdown/publishing.html 7.2 404 pages By default, users will be directed to a 404 page if they try to access a webpage that cannot be found. If you’d like to customize your 404 page instead of using the default, you may add either a _404.Rmd or _404.md file to your project root and use code and/or Markdown syntax. 7.3 Metadata for sharing Bookdown HTML books will provide HTML metadata for social sharing on platforms like Twitter, Facebook, and LinkedIn, using information you provide in the index.Rmd YAML. To setup, set the url for your book and the path to your cover-image file. Your book’s title and description are also used. This gitbook uses the same social sharing data across all chapters in your book- all links shared will look the same. Specify your book’s source repository on GitHub using the edit key under the configuration options in the _output.yml file, which allows users to suggest an edit by linking to a chapter’s source file. Read more about the features of this output format here: https://pkgs.rstudio.com/bookdown/reference/gitbook.html Or use: ?bookdown::gitbook "],["references.html", "References", " References "]]
